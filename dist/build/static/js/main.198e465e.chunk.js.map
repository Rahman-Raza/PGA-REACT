{"version":3,"sources":["Utils.js","App.js","serviceWorker.js","index.js"],"names":["range","len","arr","i","push","newPerson","firstName","arguments","length","undefined","namor","generate","words","numbers","lastName","score","Math","floor","random","makeData","map","d","Object","objectSpread","children","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickOpen","setState","open","handleSubmit","formData","state","data","handleClose","renderEditable","bind","assertThisInitialized","renderDelete","handleFormErrors","handleChange","errors","console","log","event","target","name","value","cellInfo","_this2","react_default","a","createElement","style","backgroundColor","contentEditable","suppressContentEditableWarning","onBlur","e","toConsumableArray","index","column","id","innerHTML","dangerouslySetInnerHTML","__html","_this3","IconButton_default","aria-label","color","Icon_default","onClick","splice","_this4","className","marginTop","marginBottom","textAlign","es","columns","Header","accessor","Cell","defaultPageSize","Button_default","variant","marginLeft","Dialog_default","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","lib","ref","onSubmit","onError","label","rows","rowsMax","onChange","fullWidth","fontSize","validators","errorMessages","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.198e465e.chunk.js","sourcesContent":["\nimport namor from \"namor\";\nimport \"./index.css\";\n\nconst range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nexport function newPerson(firstName = namor.generate({ words: 1, numbers: 0 }), lastName = namor.generate({ words: 1, numbers: 0 }), score = Math.floor(Math.random() * 100) )   {\n \n  return {\n    firstName: firstName,\n    lastName: lastName,\n    score: score,\n\n  };\n};\n\nexport function makeData(len = 5553) {\n  return range(len).map(d => {\n    return {\n      ...newPerson(),\n      children: range(10).map(newPerson)\n    };\n  });\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { makeData} from \"./Utils\";\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\n\n\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport Button from '@material-ui/core/Button';\n\nimport Dialog from '@material-ui/core/Dialog';\n\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  TextValidator,\n  ValidatorForm,\n\n} from \"react-material-ui-form-validator\";\n\n\n\n\n\n\n\nclass App extends Component {\n constructor() {\n    super();\n    this.state = {\n      formData: {\n        firstName: '',\n        lastName: '',\n        score: '',\n      },\n      data: makeData(10),\n      open: false,\n    };\n    this.renderEditable = this.renderEditable.bind(this);\n    this.renderDelete = this.renderDelete.bind(this);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleFormErrors = this.handleFormErrors.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n    handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleSubmit = () =>{\n    const {formData} = this.state;\n\n    const {data} = this.state;\n\n\n    data[data.length] = formData;\n\n    this.setState({data: data, open: false});\n\n\n  }\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n    handleFormErrors(errors){\n    console.log(\"there were errors here\", errors);\n  }\n    handleChange(event){\n    const { formData } = this.state;\n\n\n    formData[event.target.name] = event.target.value;\n\n    this.setState({formData});\n  }\n   renderEditable(cellInfo) {\n    return (\n      <div\n        style={{ backgroundColor: \"#fafafa\" }}\n        contentEditable\n        suppressContentEditableWarning\n        onBlur={e => {\n          const data = [...this.state.data];\n          data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n          this.setState({ data });\n        }}\n        dangerouslySetInnerHTML={{\n          __html: this.state.data[cellInfo.index][cellInfo.column.id]\n        }}\n      />\n    );\n  }\n\n   renderDelete(cellInfo) {\n    return (\n       <IconButton  aria-label=\"Delete\" color=\"primary\"  >\n        <Icon onClick={e => {\n         \n          const data = [...this.state.data];\n         \n          data.splice(cellInfo.index, 1); \n\n          this.setState({ data });\n        }}>delete</Icon>\n      </IconButton>\n     \n    );\n  }\n  render() {\n   const { data } = this.state;\n   const {formData} = this.state;\n    return (\n      <div>\n\n      <div className=\"row\" >\n      <div className=\"col-md-2\"></div>\n      <div className=\"col-md-8\">\n\n     \n      <h3 style={{marginTop: \"50px\",marginBottom: \"25px\", textAlign: \"center\"}}> First, Last Name and Score can be modified right in the table! </h3>\n             <h3 style={{marginTop: \"25px\",marginBottom: \"50px\", textAlign: \"center\"}}> Click on any column name to sort. </h3>\n\n        <ReactTable\n          data={data}\n          columns={[\n            {\n              Header: \"Remove\",\n              accessor: \"firstName\",\n              Cell: this.renderDelete\n            },\n            {\n              Header: \"First Name\",\n              accessor: \"firstName\",\n              Cell: this.renderEditable\n            },\n            {\n              Header: \"Last Name\",\n              accessor: \"lastName\",\n              Cell: this.renderEditable\n            },\n            {\n              Header: \"Full Name\",\n              id: \"full\",\n              accessor: d =>\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: d.firstName + \" \" + d.lastName\n                  }}\n                />\n            },\n            {\n              Header: \"Score\",\n              accessor: \"score\",\n              Cell: this.renderEditable\n            },\n          ]}\n          defaultPageSize={5}\n          className=\"-striped -highlight\"\n        />\n        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen} style={{marginTop: \"50px\",marginBottom: \"50px\",marginLeft:\"45%\", textAlign: \"center\"}}>\n          Add Data\n        </Button>\n\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Add Row</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n             Please complete the following:\n            </DialogContentText>\n\n              <ValidatorForm\n                ref=\"form\"\n                onSubmit={this.handleSubmit}\n                onError={errors => this.handleFormErrors(errors)}\n              >\n              <TextValidator\n                           label=\"First Name\"\n                          rows={4}\n                          rowsMax={15}\n                          name=\"firstName\"\n                          value={formData.firstName}\n                          onChange={this.handleChange}\n                          fullWidth={true}\n                          className=\"text-field\"\n                          \n                          \n                         \n                          style={{\n                            fontSize: \"14px\",\n                            color:\"black\",\n                          }}\n                          validators={[\"required\", \"minStringLength:3\"]}\n                          errorMessages={[\n                            \"this field is required\",\n                            \"Please enter at least 3 characters\"\n                          ]}\n\n                      />\n                      <TextValidator\n                           label=\"Last Name\"\n                          rows={4}\n                          rowsMax={15}\n                          name=\"lastName\"\n                          value={formData.lastName}\n                          onChange={this.handleChange}\n                          fullWidth={true}\n                          className=\"text-field\"\n                          \n                          \n                         \n                          style={{\n                            fontSize: \"14px\",\n                            color:\"black\",\n                          }}\n                          validators={[\"required\", \"minStringLength:3\"]}\n                          errorMessages={[\n                            \"this field is required\",\n                            \"Please enter at least 3 characters\"\n                          ]}\n\n                      />\n                      <TextValidator\n                           label=\"Score\"\n                          rows={4}\n                          rowsMax={15}\n                          name=\"score\"\n                          value={formData.score}\n                          onChange={this.handleChange}\n                          fullWidth={true}\n                          className=\"text-field\"\n                          \n                          \n                         \n                          style={{\n                            fontSize: \"14px\",\n                            color:\"black\",\n                          }}\n                          validators={[\"required\", 'minNumber:1', 'maxNumber:100',]}\n                          errorMessages={[\n                            \"this field is required\",\n                            \"Please enter a number greater than 0\",\n                            \"Please enter a number less than 100\"\n                            \n                          ]}\n\n                      />\n\n                       <Button\n                    \n                    style={{marginTop: \"25px\",marginLeft:\"40%\", textAlign: \"center\"}}\n                    variant=\"contained\" \n                    color=\"primary\"\n                    \n                  \n                    type=\"submit\"\n                   \n                 \n                   \n                  > Submit </Button>\n              </ValidatorForm>\n          </DialogContent>\n          \n        </Dialog>\n\n        </div>\n\n         <div className=\"col-md-2\"></div>\n    </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'mdbreact/dist/css/mdb.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}